<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-10-04T01:35:01 IST" name="All Test Suite" finished-at="2025-10-04T01:35:46 IST" duration-ms="44484">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2025-10-04T01:35:01 IST" name="CucumberRunner" finished-at="2025-10-04T01:35:46 IST" duration-ms="44484">
      <class name="runner.TestNGCucumberRunner">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:01 IST" name="beforeSuite" finished-at="2025-10-04T01:35:01 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:01 IST" name="beforeTest" finished-at="2025-10-04T01:35:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:01 IST" name="setUpClass" finished-at="2025-10-04T01:35:02 IST" duration-ms="938" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method is-config="true" signature="beforeClass(org.testng.ITestContext)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeClass" finished-at="2025-10-04T01:35:02 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@64dae3b7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeMethod" finished-at="2025-10-04T01:35:02 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeMethod" finished-at="2025-10-04T01:35:02 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeMethod" finished-at="2025-10-04T01:35:02 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeMethod" finished-at="2025-10-04T01:35:02 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeMethod" finished-at="2025-10-04T01:35:02 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeMethod" finished-at="2025-10-04T01:35:02 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="beforeMethod" finished-at="2025-10-04T01:35:02 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-10-04T01:35:37 IST" duration-ms="34760" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validate login functionality with valid credentials"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[As a user of application I want to validate login functionality]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-10-04T01:35:37 IST" duration-ms="35002" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validate login functionality with valid credentials"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate dashboards]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-10-04T01:35:36 IST" duration-ms="34371" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validate login functionality with valid credentials"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[As a user of application I want to validate login functionality]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-10-04T01:35:36 IST" duration-ms="33477" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validate login functionality with valid credentials 3"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate dashboards]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-10-04T01:35:36 IST" duration-ms="34081" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validate login functionality with invalid credentials"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[As a user of application I want to validate login functionality]"]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//span[text()='Products']"}
  (Session info: chrome=140.0.7339.208)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.10.0', revision: 'c14d967899'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.11'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [1b446431e02a6c591cfd43c27f111fd9, findElement {using=xpath, value=//span[text()='Products']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 140.0.7339.208, chrome: {chromedriverVersion: 140.0.7339.207 (17230b545fd..., userDataDir: C:\Users\SOUVIK~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60544}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60544/devtoo..., se:cdpVersion: 140.0.7339.208, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 1b446431e02a6c591cfd43c27f111fd9]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//span[text()='Products']"}
  (Session info: chrome=140.0.7339.208)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.10.0', revision: 'c14d967899'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.11'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [1b446431e02a6c591cfd43c27f111fd9, findElement {using=xpath, value=//span[text()='Products']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 140.0.7339.208, chrome: {chromedriverVersion: 140.0.7339.207 (17230b545fd..., userDataDir: C:\Users\SOUVIK~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60544}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60544/devtoo..., se:cdpVersion: 140.0.7339.208, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 1b446431e02a6c591cfd43c27f111fd9
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:199)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:132)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:51)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:531)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:350)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:344)
at stepDefs.LoginStepDefinitions.user_verify_on_dashboard(LoginStepDefinitions.java:49)
at ✽.user verify "Products" on Dashboard(file:///C:/Users/SOUVIK%20SARKAR/IdeaProjects/sampleBDDCucumber/src/test/resources/features/login.feature:27)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-10-04T01:35:36 IST" duration-ms="34225" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validate login functionality with valid credentials"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[As a user of application I want to validate login functionality]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:02 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-10-04T01:35:37 IST" duration-ms="34898" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validate login functionality with valid credentials 2"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate dashboards]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:36 IST" name="afterMethod" finished-at="2025-10-04T01:35:36 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:36 IST" name="afterMethod" finished-at="2025-10-04T01:35:36 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:36 IST" name="afterMethod" finished-at="2025-10-04T01:35:36 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:36 IST" name="afterMethod" finished-at="2025-10-04T01:35:36 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:37 IST" name="afterMethod" finished-at="2025-10-04T01:35:37 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:37 IST" name="afterMethod" finished-at="2025-10-04T01:35:37 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:37 IST" name="afterMethod" finished-at="2025-10-04T01:35:37 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:37 IST" name="afterClass" finished-at="2025-10-04T01:35:37 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:37 IST" name="tearDownClass" finished-at="2025-10-04T01:35:46 IST" duration-ms="8493" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:46 IST" name="afterTest" finished-at="2025-10-04T01:35:46 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:runner.TestNGCucumberRunner@be64738]" started-at="2025-10-04T01:35:46 IST" name="afterSuite" finished-at="2025-10-04T01:35:46 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- runner.TestNGCucumberRunner -->
    </test> <!-- CucumberRunner -->
  </suite> <!-- All Test Suite -->
</testng-results>
